@model IEnumerable<UserResponsesViewModel>

@{
    ViewData["Title"] = "User Responses Management";
}

<style>
    /* Modern Design System */
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');

    :root {
        --primary-color: #6366f1;
        --primary-light: #8b5cf6;
        --primary-dark: #4338ca;
        --success-color: #10b981;
        --success-light: #34d399;
        --success-dark: #059669;
        --info-color: #06b6d4;
        --info-light: #22d3ee;
        --info-dark: #0891b2;
        --warning-color: #f59e0b;
        --warning-light: #fbbf24;
        --warning-dark: #d97706;
        --danger-color: #ef4444;
        --danger-light: #fca5a5;
        --danger-dark: #dc2626;
        --gray-50: #f8fafc;
        --gray-100: #f1f5f9;
        --gray-200: #e2e8f0;
        --gray-300: #cbd5e1;
        --gray-400: #94a3b8;
        --gray-500: #64748b;
        --gray-600: #475569;
        --gray-700: #334155;
        --gray-800: #1e293b;
        --gray-900: #0f172a;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);
        --border-radius-sm: 8px;
        --border-radius-md: 12px;
        --border-radius-lg: 16px;
        --border-radius-xl: 24px;
    }

    * {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    }

  

 

    /* Header Section */
    .page-header {
        background: white;
        border-radius: var(--border-radius-xl);
        box-shadow: var(--shadow-xl);
        padding: 2.5rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .page-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color), var(--info-color), var(--success-color));
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 1.5rem;
    }

    .header-icon {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
        color: white;
        width: 64px;
        height: 64px;
        border-radius: var(--border-radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.75rem;
        box-shadow: var(--shadow-lg);
    }

    .header-text h1 {
        font-size: 2.25rem;
        font-weight: 800;
        color: var(--gray-800);
        margin: 0 0 0.5rem;
    }

    .header-subtitle {
        color: var(--gray-600);
        font-size: 1.1rem;
        font-weight: 500;
    }

    /* Statistics Section */
    .stats-section {
        background: linear-gradient(135deg, var(--info-color) 0%, var(--info-dark) 100%);
        color: white;
        padding: 2rem;
        margin-bottom: 2rem;
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-lg);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1.5rem;
        text-align: center;
    }

    .stat-item {
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: var(--border-radius-md);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }

    .stat-item:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }

    .stat-number {
        font-size: 2.5rem;
        font-weight: 800;
        display: block;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.875rem;
        font-weight: 500;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Selection Controls */
    .selection-controls {
        background: white;
        border-radius: var(--border-radius-lg);
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--gray-200);
        display: none;
        transition: all 0.3s ease;
    }

    .selection-controls.show {
        display: block;
        animation: slideDown 0.3s ease;
    }

    @@keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .selection-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .selection-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .selection-icon {
        background: var(--primary-color);
        color: white;
        width: 48px;
        height: 48px;
        border-radius: var(--border-radius-md);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .selection-text h3 {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--gray-800);
        margin: 0 0 0.25rem;
    }

    .selection-count {
        color: var(--gray-600);
        font-weight: 500;
    }

    .selection-actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .master-checkbox-container {
        background: white;
        border-radius: var(--border-radius-md);
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-md);
        border: 1px solid var(--gray-200);
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .master-checkbox {
        width: 28px;
        height: 28px;
        border: 2px solid var(--gray-300);
        border-radius: 8px;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: var(--shadow-sm);
    }

    .master-checkbox:hover {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .master-checkbox.checked {
        background: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
    }

    .master-checkbox input {
        display: none;
    }

    /* User Cards Grid */
    .users-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        gap: 2rem;
        margin-bottom: 2rem;
    }

    /* User Card */
    .user-card {
        background: white;
        border-radius: var(--border-radius-xl);
        box-shadow: var(--shadow-lg);
        overflow: hidden;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        border: 1px solid var(--gray-200);
    }

    .user-card:hover {
        transform: translateY(-8px);
        box-shadow: var(--shadow-2xl);
        border-color: var(--primary-color);
    }

    .user-card.selected {
        border-color: var(--primary-color);
        background: linear-gradient(135deg, #fef2f2 0%, #fecaca 10%, white 100%);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1), var(--shadow-lg);
    }

    .user-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color), var(--info-color), var(--success-color));
        transform: scaleX(0);
        transition: transform 0.3s ease;
        transform-origin: left;
    }

    .user-card:hover::before {
        transform: scaleX(1);
    }

    .user-card.selected::before {
        transform: scaleX(1);
        background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
    }

    /* Card Header */
    .card-header-custom {
        background: linear-gradient(135deg, var(--gray-50) 0%, var(--gray-100) 100%);
        padding: 1.5rem;
        border-bottom: 1px solid var(--gray-200);
        position: relative;
    }

    .user-checkbox {
        position: absolute;
        top: 1rem;
        right: 1rem;
        z-index: 10;
    }

    .custom-checkbox {
        width: 24px;
        height: 24px;
        border: 2px solid var(--gray-300);
        border-radius: 6px;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: var(--shadow-sm);
    }

    .custom-checkbox:hover {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .custom-checkbox.checked {
        background: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
    }

    .custom-checkbox input {
        display: none;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding-right: 3rem;
    }

    .user-avatar {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
        color: white;
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        font-weight: 700;
        box-shadow: var(--shadow-md);
    }

    .user-details h3 {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--gray-800);
        margin: 0 0 0.25rem;
    }

    .user-email {
        color: var(--gray-600);
        font-size: 0.875rem;
        font-weight: 500;
    }

    /* Card Content */
    .card-content {
        padding: 1.5rem;
    }

    .surveys-section {
        margin-bottom: 1.5rem;
    }

    .surveys-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

    .surveys-icon {
        background: var(--success-color);
        color: white;
        width: 32px;
        height: 32px;
        border-radius: var(--border-radius-sm);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }

    .surveys-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--gray-800);
        margin: 0;
    }

    .surveys-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
    }

    .survey-badge {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: var(--border-radius-md);
        font-size: 0.875rem;
        font-weight: 600;
        box-shadow: var(--shadow-sm);
        transition: all 0.3s ease;
    }

    .survey-badge:hover {
        transform: translateY(-1px);
        box-shadow: var(--shadow-md);
    }

    .no-surveys {
        background: var(--gray-100);
        color: var(--gray-500);
        padding: 1rem;
        border-radius: var(--border-radius-md);
        text-align: center;
        font-style: italic;
        border: 1px dashed var(--gray-300);
    }

    /* Action Button */
    .action-section {
        background: var(--gray-50);
        padding: 1.5rem;
        border-top: 1px solid var(--gray-200);
    }

    .action-btn {
        background: linear-gradient(135deg, var(--info-color) 0%, var(--info-dark) 100%);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: var(--border-radius-md);
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: var(--shadow-md);
        width: 100%;
        justify-content: center;
        position: relative;
        overflow: hidden;
    }

    .action-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }

    .action-btn:hover::before {
        left: 100%;
    }

    .action-btn:hover {
        background: linear-gradient(135deg, var(--info-dark) 0%, #0e7490 100%);
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
        color: white;
        text-decoration: none;
    }

    /* Buttons */
    .btn {
        border-radius: var(--border-radius-md);
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        font-size: 0.875rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: var(--shadow-sm);
        position: relative;
        overflow: hidden;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }

    .btn:hover::before {
        left: 100%;
    }

    .btn-danger {
        background: linear-gradient(135deg, var(--danger-color) 0%, var(--danger-dark) 100%);
        color: white;
    }

    .btn-danger:hover {
        background: linear-gradient(135deg, var(--danger-dark) 0%, #b91c1c 100%);
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
        color: white;
    }

    .btn-secondary {
        background: linear-gradient(135deg, var(--gray-500) 0%, var(--gray-600) 100%);
        color: white;
    }

    .btn-secondary:hover {
        background: linear-gradient(135deg, var(--gray-600) 0%, var(--gray-700) 100%);
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
        color: white;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: var(--border-radius-xl);
        box-shadow: var(--shadow-lg);
        border: 2px dashed var(--gray-300);
    }

    .empty-state-icon {
        background: var(--gray-100);
        color: var(--gray-400);
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        margin: 0 auto 1.5rem;
    }

    .empty-state h3 {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--gray-700);
        margin-bottom: 1rem;
    }

    .empty-state p {
        color: var(--gray-500);
        font-size: 1rem;
    }

    /* Loading States */
    .btn.loading {
        opacity: 0.7;
        pointer-events: none;
    }

    .btn.loading::after {
        content: "";
        width: 18px;
        height: 18px;
        margin-left: 0.75rem;
        border: 2px solid transparent;
        border-top-color: currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Responsive Design */
    @@media (max-width: 1024px) {
        .users-grid {
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .container-fluid {
            padding: 1rem;
        }

        .users-grid {
            grid-template-columns: 1fr;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .selection-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .selection-actions {
            width: 100%;
        }

        .selection-actions .btn {
            flex: 1;
        }
    }

    /* Animations */
    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .stagger-animation {
        animation: fadeIn 0.6s ease-out;
        animation-fill-mode: both;
    }

    .stagger-animation:nth-child(1) { animation-delay: 0.1s; }
    .stagger-animation:nth-child(2) { animation-delay: 0.2s; }
    .stagger-animation:nth-child(3) { animation-delay: 0.3s; }
    .stagger-animation:nth-child(4) { animation-delay: 0.4s; }
    .stagger-animation:nth-child(5) { animation-delay: 0.5s; }
    .stagger-animation:nth-child(6) { animation-delay: 0.6s; }
</style>

<div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header fade-in">
        <div class="header-content">
            <div class="header-icon">
                <i class="bi bi-people-fill"></i>
            </div>
            <div class="header-text">
                <h1>User Responses Management</h1>
                <p class="header-subtitle">Monitor and manage user survey responses and participation</p>
            </div>
        </div>
    </div>

    <form asp-action="DeleteSelected" method="post" id="responseForm">
        @if (Model.Any())
        {
            <!-- Statistics Section -->
            <div class="stats-section fade-in">
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-number">@Model.Count()</span>
                        <span class="stat-label">Total Users</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.Sum(u => u.Responses?.Count ?? 0)</span>
                        <span class="stat-label">Total Responses</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.Where(u => u.Responses != null).SelectMany(u => u.Responses).Select(r => r.Questionnaire?.Title).Distinct().Count()</span>
                        <span class="stat-label">Unique Surveys</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Math.Round(Model.Any() ? (double)Model.Sum(u => u.Responses?.Count ?? 0) / Model.Count() : 0, 1)</span>
                        <span class="stat-label">Avg Responses</span>
                    </div>
                </div>
            </div>

            <!-- Master Checkbox -->
            <div class="master-checkbox-container fade-in">
                <div class="master-checkbox" id="selectAllCheckbox">
                    <input type="checkbox" id="selectAllInput">
                    <i class="bi bi-check" style="display: none;"></i>
                </div>
                <label for="selectAllInput" class="mb-0 font-weight-bold">
                    <i class="bi bi-check-square me-2"></i>Select All Users
                </label>
                <div class="ms-auto">
                    <span id="selectedCount" class="badge bg-primary">0 selected</span>
                </div>
            </div>

            <!-- Selection Controls -->
            <div class="selection-controls" id="selectionControls">
                <div class="selection-header">
                    <div class="selection-info">
                        <div class="selection-icon">
                            <i class="bi bi-check-circle-fill"></i>
                        </div>
                        <div class="selection-text">
                            <h3>Selection Active</h3>
                            <p class="selection-count" id="selectionText">0 users selected</p>
                        </div>
                    </div>
                    <div class="selection-actions">
                        <button type="submit" class="btn btn-danger" id="deleteSelectedBtn">
                            <i class="bi bi-trash-fill"></i>
                            Delete Selected
                        </button>
                        <button type="button" class="btn btn-secondary" id="deselectAllBtn">
                            <i class="bi bi-x-circle"></i>
                            Deselect All
                        </button>
                    </div>
                </div>
            </div>

            <!-- Users Grid -->
            <div class="users-grid">
                @foreach (var item in Model.Select((user, index) => new { User = user, Index = index }))
                {
                    <div class="user-card stagger-animation" data-email="@item.User.UserEmail">
                        <!-- Card Header -->
                        <div class="card-header-custom">
                            <!-- User Checkbox -->
                            <div class="user-checkbox">
                                <div class="custom-checkbox user-select-checkbox">
                                    <input type="checkbox" class="selectCheckbox" name="selectedEmails" value="@item.User.UserEmail">
                                    <i class="bi bi-check" style="display: none;"></i>
                                </div>
                            </div>

                            <div class="user-info">
                                <div class="user-avatar">
                                    @(item.User.UserName?.Substring(0, 1).ToUpper() ?? "U")
                                </div>
                                <div class="user-details">
                                    <h3>@item.User.UserName</h3>
                                    <p class="user-email">@item.User.UserEmail</p>
                                </div>
                            </div>
                        </div>

                        <!-- Card Content -->
                        <div class="card-content">
                            <div class="surveys-section">
                                <div class="surveys-header">
                                    <div class="surveys-icon">
                                        <i class="bi bi-clipboard-check"></i>
                                    </div>
                                    <h4 class="surveys-title">
                                        Survey Responses (@(item.User.Responses?.Count ?? 0))
                                    </h4>
                                </div>

                                @if (item.User.Responses?.Any() == true)
                                {
                                    <div class="surveys-grid">
                                        @foreach (var response in item.User.Responses)
                                        {
                                            <span class="survey-badge">@response.Questionnaire?.Title</span>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="no-surveys">
                                        <i class="bi bi-inbox"></i>
                                        No survey responses yet
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Action Section -->
                        <div class="action-section">
                            <a asp-controller="UserResponseStatus" 
                               asp-action="UserResponsesStatus" 
                               asp-route-UserEmail="@item.User.UserEmail" 
                               class="action-btn">
                                <i class="bi bi-eye-fill"></i>
                                View Response Details
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Empty State -->
            <div class="empty-state fade-in">
                <div class="empty-state-icon">
                    <i class="bi bi-people"></i>
                </div>
                <h3>No User Responses Yet</h3>
                <p>When users start responding to surveys, they will appear here for you to manage and review.</p>
            </div>
        }
    </form>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let selectedUsers = [];

            // Update selection UI
            function updateSelectionUI() {
                const selectedCount = selectedUsers.length;
                $('#selectedCount').text(selectedCount + ' selected');
                $('#selectionText').text(selectedCount + ' user' + (selectedCount !== 1 ? 's' : '') + ' selected');
                
                if (selectedCount > 0) {
                    $('#selectionControls').addClass('show');
                } else {
                    $('#selectionControls').removeClass('show');
                }

                // Update master checkbox state
                const totalUsers = $('.selectCheckbox').length;
                const masterCheckbox = $('#selectAllCheckbox');
                const masterInput = $('#selectAllInput');
                
                if (selectedCount === 0) {
                    masterCheckbox.removeClass('checked');
                    masterInput.prop('checked', false);
                    masterCheckbox.find('i').hide();
                } else if (selectedCount === totalUsers) {
                    masterCheckbox.addClass('checked');
                    masterInput.prop('checked', true);
                    masterCheckbox.find('i').show();
                } else {
                    masterCheckbox.removeClass('checked');
                    masterInput.prop('checked', false);
                    masterCheckbox.find('i').hide();
                }
            }

            // Handle individual user checkbox clicks
            $(document).on('change', '.selectCheckbox', function() {
                const userCard = $(this).closest('.user-card');
                const userEmail = $(this).val();
                const checkbox = $(this).closest('.custom-checkbox');
                
                if ($(this).is(':checked')) {
                    if (!selectedUsers.includes(userEmail)) {
                        selectedUsers.push(userEmail);
                        userCard.addClass('selected');
                        checkbox.addClass('checked');
                        checkbox.find('i').show();
                    }
                } else {
                    selectedUsers = selectedUsers.filter(email => email !== userEmail);
                    userCard.removeClass('selected');
                    checkbox.removeClass('checked');
                    checkbox.find('i').hide();
                }
                
                updateSelectionUI();
            });

            // Handle checkbox visual clicks
            $(document).on('click', '.user-select-checkbox', function() {
                const input = $(this).find('input');
                input.prop('checked', !input.is(':checked')).trigger('change');
            });

            // Handle master checkbox
            $('#selectAllCheckbox').click(function() {
                const shouldSelectAll = selectedUsers.length !== $('.selectCheckbox').length;
                
                $('.selectCheckbox').each(function() {
                    const userCard = $(this).closest('.user-card');
                    const userEmail = $(this).val();
                    const checkbox = $(this).closest('.custom-checkbox');
                    
                    $(this).prop('checked', shouldSelectAll);
                    
                    if (shouldSelectAll) {
                        if (!selectedUsers.includes(userEmail)) {
                            selectedUsers.push(userEmail);
                        }
                        userCard.addClass('selected');
                        checkbox.addClass('checked');
                        checkbox.find('i').show();
                    } else {
                        selectedUsers = [];
                        userCard.removeClass('selected');
                        checkbox.removeClass('checked');
                        checkbox.find('i').hide();
                    }
                });
                
                updateSelectionUI();
            });

            // Deselect all button
            $('#deselectAllBtn').click(function() {
                selectedUsers = [];
                $('.selectCheckbox').prop('checked', false);
                $('.user-card').removeClass('selected');
                $('.custom-checkbox').removeClass('checked');
                $('.custom-checkbox i').hide();
                updateSelectionUI();
            });

            // Delete selected button with confirmation
            $('#deleteSelectedBtn').click(function(e) {
                if (selectedUsers.length === 0) {
                    e.preventDefault();
                    alert('Please select at least one user to delete.');
                    return;
                }

                const confirmMessage = `Are you sure you want to delete ${selectedUsers.length} user response${selectedUsers.length !== 1 ? 's' : ''}? This action cannot be undone.`;
                
                if (!confirm(confirmMessage)) {
                    e.preventDefault();
                    return;
                }

                // Add loading state
                $(this).addClass('loading').prop('disabled', true);
            });

            // Initialize UI
            updateSelectionUI();
        });
    </script>
}